CONCURRENCY
- Чем отличается процесс от потока?
Процесс - это совокупность кода и данных в общем виртуальном адресном пространстве,
выделенного ОС. Это виртуальное адресное пространство принадлежит полностью процессу,
а ОС проецирует его на физическую память.
Процессы не могут общаться без помощи специальных средств.
В одном процессе могут находиться несколько потоков, разделяющих общее виртуальное
адресное пространство. Один поток - одно ядро.



- Каким образом можно создать поток?
new Thread(new RunnableImpl())
class Thready extends Thread {}
Executors.newSingleThreadExecutor()



- Чем различаются Thread и Runnable?
Thread - определенный класс полями и методами
Runnable - интерфейс, представляющий задачу для Thread (как и Callable)



- Как работает метод Thread.join()?
Заставляет данный поток дождаться завершения другого (на котором вызван метод)



- Чем отличаются методы Thread.sleep() и Thread.yield()?
Оба не отпускают монитор.
Thread.sleep(long, long) - усыпить поток на определенное время. Поток выйдет, если
    кончится время, либо он будет прерван. Из состояния RUNNING в WAITING.
Thread.yield() - возможно, поток остановится на время, чтобы не тратить
    процессорное время.



- Почему не рекомендуется использовать метод Thread.stop()?
Thread.currentThread().{stop(), suspend(), resume()}
Могут оставить какой-либо объект в незавершенном состоянии,
что приведет к трудноуловимой ошибке.
Лучше использовать встроенный механизм оповещения потоков - Interruption



- Как остановить поток?
Использовать метод interrupt(), а внутри потока, на котором вызывается этот метод,
проверять флаг interrupted с помощью методов:
    Thread.interrupted() (сбрасывает флаг) или Thread.currentThread().isInterrupted()



- Для чего используется ключевое слово volatile?
Значение переменной может находиться в кеше определенного потока
    и данные значения могут отличаться.
Ключевое слово volatile обеспечивает видимость изменений переменной между потоками.
Удобно применять, если один поток изменяет переменную, а другие только читают.



- В чём различия между volatile и Atomic переменными?
volatile обеспечивает только то, что значение переменной будет видно всем потокам
    в ее единственном виде (без кеширования у потоков).
Atomic переменные обеспечивают атомарность операций чтения и записи.



- В чём разница между конкуренцией и параллелизмом?
Concurrency - несколько задач выполняются одновременно (необязательно на разных ядрах). Возможно переключение контекста на одном ядре.
Parallelism - параллельное выполнение задач на разных ядрах.



- Что такое монитор в Java?
Механизм синхронизации, который есть у каждого экземпляра класса и самого класса.



- В чем заключаются различия между cтеком (stack) и кучей (heap) с точки зрения многопоточности?
У каждого потока есть свой стек вызовов. Поток изменить чужой стек не может.
Куча - одна, делится всем процессом, изменяется всеми потоками



- Чем отличаются два интерфейса Runnable и Callable?
Callable, в отличие от Runnable, возвращает значение и может выбросить проверяемое исключение.



- Что значит «усыпить» поток?
Вызывать внутри метода статический метод Thread.sleep(long), для
    которого перестанет выделяться процессорное время, но никакие
    мониторы не освободятся.



- В каких состояниях может находиться поток?
Thread.State NEW - not started yet
             RUNNABLE - is executing
             BLOCKED - waiting for a release of a monitor
             WAITING - indefinitely waiting for another thread
             TIMED_WAITING - timed waiting for another thread
             TERMINATED - done its job



- Как работают методы wait() и notify()/notifyAll()?
Эти методы должны использоваться в синхронизованном блоке на объекте,
    на котором будут вызываться данные методы.
Иначе - IllegalMonitorStateException.



- В чем разница между notify() и notifyAll()?
notify() - JVM разбудит только один поток на ее усмотрение
notifyAll() - JVM разбудит все потоки



- Чем отличается работа метода wait() с параметром и без параметра?
wait() - безграничное ожидание (до вызова на мониторе notify()/notifyAll())
wait(long) - ожидание временное (либо вызов notify()/notifyAll())



- Какие существуют способы синхронизации в Java?
wait(), notify()
Использование java.util.concurrent (Lock, Semaphore)



- Что такое deadlock?
Взаимная блокировка (один поток ожидает на одном мониторе, другой на другом,
    при этом оба монитора захвачены)
Чтобы избежать:
    - не использовать вложенные synchronized () {}



- В чём заключается различие между методами submit() и execute() у Executor?
void execute(Runnable)
T submit({Runnable, T/Callable})



- Что такое livelock?
Потоки проделывают работу, но никак не могут прийти к ее завершению.



- Что такое race condition?
Ситуация, когда одно событие происходит раньше другого (но не должно было)



- Какие есть способы решения проблемы race condition?
Использование синхронизации, примитивов синхронизации



- Что такое Executor?
Интерфейс, выполняющий Runnable и скрывающий подробности создания потоков



- Какие типы Executor'ов вы знаете?
Executor <- ExecutorService <- ScheduledExecutorService



- Что такое FutureTask?
FutureTask - конкретная реализация интерфейса Future
    и представляет асинхронное вычисление



- Что вы знаете о модели памяти Java?
<- Heap <- New generation (Eden, Survivor1, Survivor2) // объекты,
        <- Old Generation      // управляется GC, общая для всех потоков
       (<- до Java 7 PermGen)
<- Stack // стек вызовов и локальные переменные, для каждого потока свой
<- Non-heap <- Code cache (compiled by JIT) (Native area)
            <- Metaspace (Class<?>, static) (Method area)



- Что происходит, когда в потоке выбрасывается исключение?
Поток из обычного режима выполнения переходит в режим поиска обработчика,
и, если не находит, используется DefaultUncaughtExceptionHandler.



- В чем заключаются различия между CyclicBarrier и CountDownLatch?
java.util.concurrent.CyclicBarrier, в отличие от juc.CountDownLatch
может быть использован несколько раз.
CountDownLatch - уменьшаем счетчик
CyclicBarrier - ожидаем определенное количество ожидающих потоков (также
предоставляет возможность ожидающим потокам выполнить некоторое действие)



- Какой параметр запуска JVM используется для контроля размера стека потока?
-Xss512{k, K} <- 512 kilobytes
-Xss2{m, M} <- 2 megabytes



- Назовите различия между synchronized и ReentrantLock?
ReentrantLock может работать в "справедливом" режиме (что помогает
избежать проблемы "голодания")
Имеет более гибкий интерфейс настройки блокировки (tryLock(), lock())



- Что такое ReadWriteLock?
Данный lock предоставляет возможность разделить блокировки чтения и записи.
Множество потоков может читать, но только один поток может писать.



- Что такое Semaphore?
Примитив синхронизации, который контролирует количество доступов (permits).
Представляет из себя счетчик.
(acquire() / release())



- Что вы знаете о Fork/Join?
Framework для выполнения задач, которые можно рекурсивно разбить на
маленькие подзадачи. Использует work-stealing algorithm (отработавшие
потоки могут "украсть" задачи из очереди у активных потоков)



- Что такое ThreadLocal-переменная?
Класс, который позволяет иметь одну переменную с разными значениями
для каждого потока



- Что такое ordering, as-if-serial semantics, sequential consistency, visibility, atomicity, happens-before, mutual exclusion, safe publication?
ordering - механизм, определяющий, когда один поток может увидеть
    out-of-order (неверный порядок) исполнения инструкций другого потока.
    CPU для производительности может переупорядочивать инструкции,
    до тех пор пока для потока не будет видно никаких отличий
    (гарантия as-if-serial semantics).
sequential consistency - тот же as-if-serial semantics
visibility - определяет момент, когда действия в одном потоке становятся
    видны в другом
atomicity - атомарность (неделимая команда)
mutual exclusion - mutex (semaphore с одним доступом) -
    гарантирует исключительный доступ к ресурсу (synchronized (mutex) {})
safe-publication - показ объектов из одного потока другим, не нарушая
    visibility (static {}, volatile, AtomicX)
happens-before - ограничение на порядок выполнения. Есть 4 правила:
    Освобождение мьютекса happens before захвата этого же монитора
    Thread.start() happens before Thread.run()
    Завершение run() happens before выхода из метода join()
    Запись в volatile переменную happens-before чтение



- Как создать потокобезопасный Singleton?
/ Сделать экземпляр static final
/ Поместить в enum
/ synchronized getInstance()





JVM
- Какие виды References вы знаете?
StrongReference, WeakReference, SoftReference, PhantomReference



- Что такое Strong Reference?
При обычном создании ссылочной переменной она является Strong Reference.
Объект может быть удален, когда нет Strong Reference на него.



- Что такое Weak Reference?
Ссылка, по которой объект может быть удален в любую сборку мусора



- Что такое Soft Reference?
Ссылка, по которой объект может быть удален при недостатке памяти
    (хорошо для кеша)



- Что такое Phantom Reference?
Ссылка, по которой объект не доступен напрямую (только после удаления).
Нужны для более безопасной финализации ссылок (вместо finalize()).



- На какие области памяти разбит Heap?
<- New Generation <- Eden Space (помещаются при создании объекты)
                  <- Survivor Space 1 / 2 (помещаются объекты,
                                           если пережили 1 сборку)
<- Old (Tenured) Generation (помещаются долгоживущие объекты)



- Расскажите о Young Generation
<- New Generation <- Eden Space (помещаются при создании объекты)
                  <- Survivor Space 1 / 2 (помещаются объекты,
                                           если пережили 1 сборку)
После достижения определенного процента занятой памяти,
происходит minor collection (GC очищает Eden Space
            и перемещает объекты в следующую область)
Для ускорения очистки памяти и исправления её фрагментации,
Survivor Space 1 и Survivor Space 2 меняются местами.



- Расскажите о Old (Tenured) Generation
<- Old (Tenured) Generation (помещаются долгоживущие объекты)
После достижения определенного процента занятой памяти,
происходит major collection (GC обрабатывает все объекты)



- Расскажите о Permanent Generation (non-heap)
Permanent Generation - специальное ограниченное место в Heap
    (метаинформация, static, JIT-info, String pool)
С Java 8 - Metaspace (метаинформация, используемая JVM
                                        (классы, методы))
Теперь Metaspace контролируется GC, что уменьшает вероятность
утечки памяти. Отдельно находится Code cache (from JIT).



- Какой объект считать достижимым. Как происходит сборка мусора?
Если объект является достижимым из стека или статической области, то он не поддается сборке мусора



- GC и различные его виды в JVM
В HotSpot VM реализованы четыре GC, основанных на идее Generational
        Garbage Collection (учитывает поколения):
Serial GC, Parallel GC, CMS GC, G1 GC, Shenandoah GC



- Расскажите о Serial GC
Последовательная сборка молодого и старого поколений (другие
    потоки останавливаются <- Stop-the-world).
Подходит для однопоточных небольших программ.



- Расскажите о Parallel GC
Многопоточный Serial GC.
Подходит для многопоточных небольших программ.



- Расскажите о Concurrent Mark-and-Sweep (CMS) GC
Делает две короткие паузы (только при сборке молодого поколения):
    анализ Stack (в фоновом режиме проходится Heap, происходит mark)
    снова анализ Stack, удостовериться, что во время
    фонового обхода ничего не поменялось (sweep - очистка)
При полной сборке:
    stop-the-world (пауза и очистка в отдельном потоке)
Присутствует фрагментация памяти (так как нет Compact)



- Расскажите о Garbage-First (G1) GC
Использует алгоритм очистки Mark-and-Sweep-Compact через заданные
    промежутки времени



- За какие функции отвечает JVM?
Проверка и выполнение bytecode
Управление памятью



- Что такое Class Loader? Какие функции выполняет Class Loader?
Загрузчик классов.
Ищет библиотеки, загружает классы из них по требованию программы.
Класс может быть загружен только один раз.



- Какие виды Class Loader'ов вы знаете?
ClassLoader - abstract class, имеет конкретных наследника
при запуске JVM:
    Bootstrap CL
    Extensions CL
    System CL



- Расскажите про Bootstrap class loader
Является частью ядра JVM, написан на нативном коде.
Bootstrap Class Loader загружает основные библиотеки
    по пути <JAVA_HOME>/jre/lib.
Служит родителем для всех других загрузчиков.



- Расскажите про Extensions class loader
Extensions Class Loader загружает расширения для
    основных библиотек по пути <JAVA_HOME>/jre/lib/ext.



- Расскажите про System class loader
System Class Loader реализован на уровне JRE.
Загружает все классы уровня приложения в JVM по пути
    classpath и -cp.



- Расскажите про user-defined class loader
Возможно унаследоваться от ClassLoader и определить
свою логику загрузку классов (по HTTP, например)



- Расскажите про Run-Time Data Areas в JVM
Это области данных среды выполнения JVM:
<- Heap (YoungGen (Eden, S0, S1), OldGen)
<- Metaspace (Method Area (Runtime Constant Pool)) & Code Cache
<- Thread (PCR, JVM Stack, Native Method Stack)



- Что такое Heap?
Heap - единая область для всех объектов, создаваемая при старте JVM



- Что такое PC Register (PCR), Java Virtual Machine Stacks, Native Method Stacks, Frames?
Thread {
    PCR - регистр, который указывает на выполняемую инструкцию.
    JVM Stack - стек вызовов {
        Stack Frame - определенный вызов метода (хранит локальные переменные)
    }
    Native Method Stack - стек вызовов кода на другом ЯП
}



- Что такое Method Area (в Metaspace)? Что такое Run-Time Constant Pool?
Method area — область метода в Metaspace, которая хранит структуры
    для классов, код для конструкторов и методов;
    также хранит Runtime Constant Pool — пул для хранения констант



- Какие существуют ключи для настроек heap?
Начальный размер Heap: -Xms512{k, K} - kilobyte ({m, M} - megabyte)
Максимальный размер Heap: -Xmx1024m
Отношение размера OldGeneration к YoungGeneration: -XX:NewRatio=n
Отношение размера Eden к Survivor: -XX:SurvivorRatio=n
Возраст объекта, когда он перемещается из Survivor в OldGeneration: -XX:MaxTenuringThreshold=n



- Что такое GraalVM?
Это новая виртуальная машина, которая может запускать многие ЯП (JS, C),
а также компилировать Java-код.



- Что такое JIT Compiler?
В отличие от AOT (Ahead-of-Time) компилятора, JIT-компилятор работает
параллельно с интерпретатором, в "горячих точках" (методах и циклах)
компилируя байт-код в нативный код и сохраняя его в Code Cache.



- Какие диагностические интерфейсы JVM вы знаете?
VisualVM - GUI-инструмент
jstat - команда позволяет отслеживать использование памяти, загрузку классов, сборку мусора
jstack - команда для создания thread dumps