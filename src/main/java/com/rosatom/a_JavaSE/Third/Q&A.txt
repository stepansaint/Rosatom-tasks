SERIALIZATION
- Что такое сериализация?
Процесс сохранения состояния объекта в байты
static-переменные не сериализуются



- Что из себя представляет процесс сериализации/десериализации с использованием интерфейса Serializable?
Открытие ObjectInputStream и чтение байтов (readObject() / readInt())
в строгой последовательности
(в той же, которая использовалась при записи в ObjectOutputStream (writeObject()/ writeUTF()))
Конструктор у класса не вызывается (используется Reflection API),
    но у родителя вызывается конструктор по-умолчанию.



- Как изменить стандартное поведение сериализации/десериализации?
С помощью Serializable не так быстро (из-за использования Reflection API),
    невозможно управлять процессом (кроме transient и private static final long serialVersionUID).
Имплементировать Externalizable (переопределить методы writeExternal() и readExternal()).
Благодаря этому можно, например, хранить данные в зашифрованном виде (пароли),
то есть и писать и читать их с помощью шифровальщика.
Можно сериализовать static-переменные, но не стоит.
Нельзя final-переменные (т. к. вызывается конструктор по-умолчанию)
Все наследники Externalizable класса должны иметь конструкторы по-умолчанию.



- Как исключить поля из сериализации?
Использовать ключевое слово transient перед полем класса.
Переменные static не сериализуются.
Или использовать Externalizable.



- Какое влияние оказывают на сериализуемость модификаторы полей static и final?
static - не сериализуется (можно при использовании java.io.Externalizable, но не стоит)
final невозможно десериализовать при использовании java.io.Externalizable
    или если final-переменная еще не инициализирована



- Зачем нужно поле serialVersionUID в сериализации?
Стандартный механизм инициализации значения serialVersionUID
чувствителен к любым изменениям в классе.
А если serialVersionUID не совпадают, выбрасывается исключение.
private static final long serialVersionUID = 1L;



- Когда стоит изменять значение поля serialVersionUID?
При внесении изменений в класс каких-то несовместимых изменений
(удаление поля)
    Можно добавлять новые поля,
    изменять из статических полей в нестатические,
    изменение полей из транзитных в не транзитные.



- В чем особенность сериализации Singleton'ов?
Необходимо определить метод
    (private / public) Object readResolve() {
        return anotherObject;
    }
    **private Object writeReplace() {
        return INSTANCE;
    }**
который возвращает уже созданный объект внутри данного (и вместо него).
Или использовать singleton внутри enum, т. к. JVM гарантирует,
что каждый элемент перечисления создается только один раз.





IO
- Какие существуют виды потоков ввода/вывода?
Байтовые (InputStream, java.io.OutputStream) и символьные (Reader, java.io.Writer)



- Основные предки потоков ввода/вывода.
Input / Output Stream:
    ByteArray(I/O)Stream        Data(I/O)Stream
    Filter(I/O)Stream           Buffered(I/O)Stream
    File(I/O)Stream
    Object(I/O)Stream
    PrintStream

Reader / Writer:
    I/O(Stream)(R/W)
    CharArray(R/W)              Buffered(R/W)
    Filter(R/W)
    File(R/W)
    String(R/W)
    PrintWriter



- Чем отличаются следующие потоки: InputStream, OutputStream, Reader, Writer?
InputStream - байтовый поток чтения
OutputStream - байтовый поток записи
Reader - символьный поток чтения
Writer - символьный поток записи



- Что такое RandomAccessFile?
Класс из java.io, который позволяет и читать, и писать в файл,
перемещаться по нему. Принимает параметр mode.



- Какие подклассы базового класса InputStream вы знаете, для чего они предназначены?
ByteArrayInputStream - читать из переданного массива байт
FileInputStream - читать файл по байтам
DataInputStream - оборачивает другой IS для чтения различных типов данных
BufferedInputStream - оборачивает другой IS для буферизации
ObjectInputStream - оборачивает другой IS для чтения объектов
SequenceInputStream - сливает два потока в один



- Какие подклассы базового класса OutputStream вы знаете, для чего они предназначены?
ByteArrayOutputStream - писать в лежащий внутри массив байтов
FileOutputStream - писать в файл байты
DataOutputStream - оборачивает другой OS для записи различный типов данных
BufferedOutputStream - оборачивает другой OS для буферизации
ObjectOutputStream - оборачивает другой OS для записи объектов
PrintStream - оборачивает другой OS для записи текста


- Какие подклассы базового класса Reader вы знаете, для чего они предназначены?
CharArrayReader - читать из переданного массива символов
StringReader - читать из переданной строки символы
FileReader - читать из файла символы
BufferedReader - оборачивает R для буферизации
InputStreamReader - оборачивает IS для чтения символов



- Какие подклассы базового класса Writer вы знаете, для чего они предназначены?
CharArrayWriter - пишет во внутренний массив символов
StringWriter - пишет во внутреннюю строку символы
FileWriter - пишет в файл символы
BufferedWriter - оборачивает другой W для буферизации
PrintWriter - оборачивает другой W для записи текста
OutputStreamWriter - оборачивает OS для записи символов



- Какие классы позволяют преобразовать байтовые потоки в символьные и обратно?
OutputStreamWriter - пишет в OS байты из переданных символов
InputStreamReader - читает из IS байты в символы



- Какой класс предназначен для работы с элементами файловой системы?
java.io.File / java.nio.file.Path



- Какие методы класса File вы знаете?
isFile()
isDirectory()
toPath()
mkdir()
createFile()
exists()



- Какие классы позволяют архивировать объекты?
InflaterInputStream     DeflaterOutputStream
ZipInputStream      ZipOutputStream



- В чём заключается разница между IO и NIO?
IO - поток-ориентированный, блокирующий ввод/вывод,
    нет виртуальных файловых систем и символических ссылок
NIO - буфер-ориентированный, неблокирующий ввод/вывод





Java 8+
- Какие нововведения, появились в Java 8 и JDK 8?
Lambda и @FunctionalInterface
Stream API
interface: default methods, static methods
новые методы для java.util.Collection, java.util.Map



- Что такое lambda? Какова структура и особенности использования лямбда-выражения?
Лямбда-выражения позволяет описать функциональность метода. Передается
в качестве аргумента.
Может использовать переменные, объявленные вне тела, если они final или effectively-final.



- Как отсортировать список строк с помощью лямбда-выражения?
1. list.sort({(a, b) -> a.compareTo(b) == String::compareTo == Comparator.naturalOrder()})
2. list.stream().sorted().{toList() / collect(Collectors.toList())};
3.Collections.sort(list);



- Что такое ссылка на метод?
Если сигнатуры функционального интерфейса и существующего метода совпадают,
возможно использовать ссылку на метод - конкретную реализацию.



- Что такое функциональные интерфейсы?
Интерфейс, который содержит только один абстрактный метод.
При этом в нем могут быть объявлены и default, и static методы.



- Какие функциональные интерфейсы вы знаете?
Supplier, Consumer, Predicate, Function (и подтип Operator)
Comparator, Runnable, Callable



- Что такое default методы в интерфейсе?
Методы, имеющие реализацию, наследники могут пользоваться ими или переопределить.



- Что такое Optional?
Контейнер для объекта (может быть null).
Помогает избежать java.lang.NPE



- Что такое Stream?
Класс, представляющий Stream (поток) элементов.
Есть параметризованный Stream и примитивные Stream.



- Какие существуют способы создания стрима?
list/set.stream()
Arrays.stream()
Stream.of(...)
IntStream.range() / .iterate() / .generate()



- Для чего нужен метод collect() в стримах?
Терминальный метод для того, чтобы собрать элементы стрима.
(В коллекцию, например)


- Какие терминальные методы работы со стримами вы знаете?
collect(), reduce() (min(), max(), average()), {any, all, none}Match(),
forEach{Ordered}()



- Какие промежуточные методы работы со стримами вы знаете?
filter(), map(), flatMap(), mapMulti(), limit(),
skip(), sorted(), {take, drop}While(), peek()



- Что делает метод filter() в стримах?
Пропускает элементы, удовлетворяющие Predicate



- Для чего в стримах предназначены методы map() и
        mapToInt(), mapToDouble(), mapToLong()?
Применяет функцию к каждому элементу и возвращает результат в виде нового стрима.
Можно применять для изменения типа элемента.



- Для чего в стримах предназначены методы flatMap(), flatMapToInt(),
        flatMapToDouble(), flatMapToLong()?
Позволяет преобразовать один элемент в ноль / один / больше.
Возвращаем стрим



- Что делает метод limit() в стримах?
Ограничивает стрим определенным количеством элементов.



- Что делает метод sorted() в стримах?
Сортирует элементы стрима и помечает его как отсортированный.
Если он уже помечен отсортированным, ничего не произойдёт



- Для чего в стримах применяются методы forEach() и forEachOrdered()?
Это терминальные операторы.
Выполняют указанное действие для каждого элемента стрима.
forEachOrdered() применяется, когда нужно элементы при параллельном стриме
поставить в правильную последовательность



- В чем разница между Collection и Stream?
Коллекции ограничены и позволяют работать с отдельными элементами,
тогда как стримы потенциально бесконечны и не позволяют работать с отдельными
элементами.



- Что такое StringJoiner?
Аккумулятор с заданным разделителем (возможно префиксом и суффиксом)



- Что такое ForkJoinPool?
Специальный вид ExecutorService. Для рекурсивных задач.
(Используется в Stream API)



- Что вы знаете про Date Time API из Java 8? (java.time.*)
Замена java.util.Date
Центральный класс java.time.LocalDateTime.
Immutable-класс



- Какой класс появился в Java 8 для кодирования/декодирования данных?
Потокобезопасные java.util.Base64.Encoder / java.util.Base64.Decoder



- Как создать Base64 кодировщик и декодировщик?
java.util.Base64.getEncoder() / java.util.Base64.getDecoder()





GENERICS
- В чем преимущество Generic'ов, как работают?
        Что такое type-erasure? В чем отличие от шаблонов C++?
Дженерики - параметрический полиморфизм. Обеспечивают типовую безопасность.
Работают благодаря type-erasure (уничтожению типов после компиляции),
    генерируются bridge-методы (где кастуется Object).
Поэтому проверяются дженерики на этапе компиляции, а массивы - в рантайм.
В отличие от шаблонов С++:
    Нельзя использовать примитивы.
    Создается один класс-файл для всех типов.



- Что такое Generic метод?
Параметризовать метод можно как и в параметризованном классе, так и нет.
Угловые скобки с типом указываются перед возвращаемым значением.



- Как Generics используется в классах?
После имени класса.
Такие классы (и интерфейсы) называются дженерик-типами.



- Метод принимает ссылку на List<Parent>. Child наследуется от Parent.
        Можно ли в метод передать List<Child>?
Нет, т.к. обобщенные типы (т.е. классы List<Parent> и List<Child>) инварианты.



- Расскажите про Wildcard
Специальный символ: <?> (wildcard - маска), который используется
для придания свойств вариантности при взаимодействии:
    <? extends T> - upper bounded wildcard (можем получать элементы),
    <? super T> - lower bounded wildcard (можем класть элементы).
Generics инварианты, а Wildcard - не Generics,
    а специальный тип параметризации переменных или параметров метода.



- Что такое ковариантность/контравариантность?
Ковариантность достигается через upper bounded wildcard <? extends T>.
Контравариантность достигается через lower bounded wildcard <? super T>.



- Что означает принцип PECS (SECS) ?
Producer Extends Consumer Super.
Supplier Extends Consumer Super.
Если метод имеет аргументы с параметризованным типом, то:
    аргумент-производитель (читаем из аргумента) - <? extends T>
    аргумент-потребитель (пишем в аргумент) - <? super T>
(если и потребитель, и производитель, что не очень) — оставить как есть.



- Что такое Bounded Wildcard?
Поддерживаем либо ковариантность (<? extends T>),
либо контравариантность (<? super T>).



- Что вы знаете про Bounded type argument (проблема несовместимости generic-типов)?
Дженерик типы инварианты.
Существует bounded type argument: <T extends A & B & C>.



- Что такое Lower bounded wildcard?
<? super Cat> (consumer, поддерживает контравариантность)



- Что такое Wildcard Capture (или "Capture helpers")?
Использование в аргументе типа wildcard (<?>) не позволяет нам добавлять
    в коллекцию элемент.
Для этого возможно параметризовать метод с этой коллекцией, и получается,
компилятор уже будет знать, какой аргумент типа содержит коллекция.



- Есть ли отличия в записи List<?> и List<? extends Object>?
Оба этих типа в рантайме сотрутся в List<Object>, функциональных отличий нет.
Оба своего рода upper bounded wildcard.



- Terms:
Generic types (дженерик типы) - дженерик-класс{интерфейс} с параметром в заголовке
Parameterized types (параметризованные типы) - подстановка аргумента типа в дженерик тип
Type parameter (параметр типа) - обозначение при объявлении дженерик типа
Type argument (аргумент типа) - подстановка аргумента в параметр типа
Wildcard (маска) - <?> (неизвестный тип)
Bounded wildcard (ограниченная маска) - маска, ограниченная сверху (<? extends T) или снизу (<? super T>)
Raw type (сырой тип) - использование дженерик типа без аргумента типа
